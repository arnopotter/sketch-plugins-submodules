/*----------------------------------------------------------

Author: Ashung Hung
Homepage: https://github.com/Ashung/Automate-Sketch
License: https://creativecommons.org/licenses/by-sa/4.0

----------------------------------------------------------*/

var new_slice_for_normal = function(context) { addSlice(context, normal) };
var new_slice_for_ios_1x = function(context) { addSlice(context, ios1x) };
var new_slice_for_android_1x = function(context) { addSlice(context, android1x) };
var new_slice_for_web = function(context) { addSlice(context, web) };
var new_slice_for_svg = function(context) { addSlice(context, svg) };

function addSlice(context, preset) {
    var doc = context.document;
    var selection = context.selection;

    if (selection.count() == 0) {
        doc.showMessage("Plese select at least 1 layer.");
        return;
    }

    doc.currentPage().deselectAllLayers();
    var selectedLayers = [];

    for (var i = 0; i < selection.count(); i++) {

        var layer = selection.objectAtIndex(i);

        if (layer.class() == "MSSliceLayer") {
            var slice = layer;
        } else {
            var slice = MSSliceLayer.sliceLayerFromLayer(layer);

            var msRect = MSRect.rectWithUnionOfRects([
                MSRect.alloc().initWithRect(slice.absoluteRect().rect()),
                MSRect.alloc().initWithRect(layer.absoluteRect().rect())
            ]);

            slice.absoluteRect().setRect(msRect.rect());

            if (
                layer.class() == "MSLayerGroup" ||
                layer.class() == "MSArtboardGroup" ||
                layer.class() == "MSSymbolMaster"
            ) {
                slice.moveToLayer_beforeLayer(layer, layer.firstLayer());
                // Export Group Contents Only
                if (layer.class() == "MSLayerGroup") {
                    slice.exportOptions().setLayerOptions(2);
                }
            }
        }

        // Export options
        slice.exportOptions().removeAllExportFormats();
        for (var j = 0; j < preset.length; j++) {
            var size = slice.exportOptions().addExportFormat();
            var format = preset[j];
            size.setFileFormat(format.format);
            size.setScale(format.scale);
            if (preset[j].suffix) {
                size.setName(format.suffix);
            }
            if (preset[j].prefix) {
                size.setNamingScheme(1);
                size.setName(format.prefix);
            }
        }

        // slice.select_byExpandingSelection(true, true);
        selectedLayers.push(slice);

    }

    doc.setSelectedLayers(MSLayerArray.arrayWithLayers(selectedLayers));

}

var normal = [
    {
        scale: 1,
        format: "png",
        suffix: ""
    }
];

var web = [
    {
        scale: 1,
        format: "png",
        suffix: ""
    },
    {
        scale: 2,
        format: "png",
        suffix: "_2x"
    }
];

var svg = [
    {
        scale: 1,
        format: "svg",
        suffix: ""
    }
];

var ios1x = [
    {
        scale: 1,
        format: "png",
        suffix: ""
    },
    {
        scale: 2,
        format: "png",
        suffix: "@2x"
    },
    {
        scale: 3,
        format: "png",
        suffix: "@3x"
    }
];

var android1x = [
    {
        scale: 1,
        format: "png",
        prefix: "res/drawable-mdpi/"
    },
    {
        scale: 1.5,
        format: "png",
        prefix: "res/drawable-hdpi/"
    },
    {
        scale: 2,
        format: "png",
        prefix: "res/drawable-xhdpi/"
    },
    {
        scale: 3,
        format: "png",
        prefix: "res/drawable-xxhdpi/"
    },
    {
        scale: 4,
        format: "png",
        prefix: "res/drawable-xxxhdpi/"
    }
];
